//{ Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL) return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}

Node* buildTree(int in[], int post[], int n);

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++) cin >> in[i];
        for (int i = 0; i < n; i++) cin >> post[i];
        Node* root = buildTree(in, post, n);
        preOrder(root);
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends


/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

//Function to return a tree created from postorder and inoreder traversals.
  Node* solve(int in[],int pre[],int n, map<int,int> &nodetoindex,int &index ,int inorderstar
    ,int inorderend)
    {
        if(index <0 || inorderstar > inorderend){
            return NULL;
        }
        int element = pre[index--];
        Node* root = new Node(element);
        int position = nodetoindex[element];
        
        root-> right=solve(in,pre,n,nodetoindex,index,position+1,inorderend);
        root -> left=solve(in,pre,n,nodetoindex,index,inorderstar,position-1);
        return root;
        
        
    }
 void mapping(map<int,int> &nodetoindex,int in[], int n){
        for(int i =0;i<n;i++){
            nodetoindex[in[i]] = i;
        }
    }
Node *buildTree(int in[], int post[], int n) {
    // Your code here
     int preorderindex = n-1;
        map<int,int> nodetoindex;
        mapping(nodetoindex,in,n);
        Node* ans = solve(in,post,n,nodetoindex,preorderindex,0,n-1);
        return ans;
}
