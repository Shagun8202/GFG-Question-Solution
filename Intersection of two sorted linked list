//{ Driver Code Starts
//

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

Node* inputList(int size)
{
    Node *head, *tail;
    int val;
    
    cin>>val;
    head = tail = new Node(val);
    
    while(--size)
    {
        cin>>val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
}

Node* findIntersection(Node* head1, Node* head2);

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n,m;
	    cin>> n >> m;
	    
	    Node* head1 = inputList(n);
	    Node* head2 = inputList(m);
	    
	    Node* result = findIntersection(head1, head2);
	    
	    printList(result);
	    cout<< endl;
	}
	return 0;
}

// } Driver Code Ends


/* The structure of the Linked list Node is as follows:

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

*/

Node* findIntersection(Node* head1, Node* head2)
{  
    if(head1==NULL || head2 == NULL){
        return NULL;
    }
   Node* head = NULL;
   Node* tail = NULL;
   Node* p = head1;
   Node* q = head2;
   while(p != NULL && q != NULL){
           
                if(p->data == q ->data){
                 Node* new1 = new Node( p->data);
                if(head == NULL){
                   head = new1;
                   tail = new1;
             }
             else{
                tail->next = new1;
                tail = new1;
              }
              p = p->next;
              q = q->next;
           }
           else{
           if(q->data > p->data){
               p = p->next;
           }
           else{
               q = q->next;
           }
           }
          
       }

   
   return head;
}
